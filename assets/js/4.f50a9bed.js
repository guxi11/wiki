(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{348:function(s,t,a){s.exports=a.p+"assets/img/inherit00.aa578516.png"},359:function(s,t,a){"use strict";a.r(t);var e=a(43),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"javascript常用的八种继承方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript常用的八种继承方案"}},[s._v("#")]),s._v(" JavaScript常用的八种继承方案")]),s._v(" "),e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),e("p",[s._v("首先我们约定一下接下来使用到的符号的含义：")]),s._v(" "),e("ol",[e("li",[e("code",[s._v("===")]),s._v(": 上面的线是 "),e("code",[s._v("prototype")]),s._v(" 线段（方向省略了，下同），下面的线是 "),e("code",[s._v("constructor")]),s._v(" 线段")]),s._v(" "),e("li",[e("code",[s._v("/")]),s._v(": "),e("code",[s._v("__proto__")]),s._v(" 线段")]),s._v(" "),e("li",[e("code",[s._v("|")]),s._v(" : 实例属性的继承")]),s._v(" "),e("li",[e("code",[s._v("+ properties")]),s._v(": 增加属性")])]),s._v(" "),e("p",[e("em",[s._v("基本上，这些符号与下图中的有向线段一一对应：")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(348),alt:"继承"}})]),s._v(" "),e("h2",{attrs:{id:"_1、原型链继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、原型链继承"}},[s._v("#")]),s._v(" 1、原型链继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("            superType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n                 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \nsubType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("superType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("subType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("由图可知，subType 的原型是 superType 的实例，再加上了一些属性。所以缺点是：")]),s._v(" "),e("ul",[e("li",[s._v("多个 subType 实例对原型类型的操作会改变这个实例（subType 的原型）。")])]),s._v(" "),e("h2",{attrs:{id:"_2、借用构造函数继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、借用构造函数继承"}},[s._v("#")]),s._v(" 2、借用构造函数继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("superType\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\t\t\t\t\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subType\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("subType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类（不使用原型）")]),s._v(" "),e("p",[s._v("缺点：")]),s._v(" "),e("ul",[e("li",[s._v("只能继承父类的"),e("strong",[s._v("实例")]),s._v("属性和方法，不能继承原型属性/方法")]),s._v(" "),e("li",[s._v("无法实现复用，每个子类都有父类实例函数的副本，影响性能")])]),s._v(" "),e("h2",{attrs:{id:"_3、组合继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、组合继承"}},[s._v("#")]),s._v(" 3、组合继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("superType     superType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("superType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("subType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("组合上述两种方法就是组合继承。用原型链实现对"),e("strong",[s._v("原型")]),s._v("属性和方法的继承，用借用构造函数技术来实现"),e("strong",[s._v("实例")]),s._v("属性的继承。")]),s._v(" "),e("p",[s._v("从图中可以看出，superType 的实例属性被 superType 的原型和实例继承，所以有这样的缺点：")]),s._v(" "),e("ul",[e("li",[s._v("在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法。")])]),s._v(" "),e("h2",{attrs:{id:"_4、原型式继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、原型式继承"}},[s._v("#")]),s._v(" 4、原型式继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("      obj\n     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\nclone\n")])])]),e("p",[s._v("缺点：")]),s._v(" "),e("ul",[e("li",[s._v("原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。")]),s._v(" "),e("li",[s._v("无法传递参数")])]),s._v(" "),e("h2",{attrs:{id:"_5、寄生式继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、寄生式继承"}},[s._v("#")]),s._v(" 5、寄生式继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("      obj\n     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\nclone "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n")])])]),e("p",[s._v("缺点同原型式继承。")]),s._v(" "),e("h2",{attrs:{id:"_6、寄生组合式继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、寄生组合式继承"}},[s._v("#")]),s._v(" 6、寄生组合式继承")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("superType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prototype "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("subType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("步骤：")]),s._v(" "),e("ul",[e("li",[s._v("父类初始化实例属性和原型属性")]),s._v(" "),e("li",[s._v("子类初始化，并借用构造函数传递增强子类实例属性（支持传参和避免篡改）")]),s._v(" "),e("li",[s._v("将子类原型指向父类原型，并修复因重写原型而失去的默认的constructor 属性")]),s._v(" "),e("li",[s._v("新增子类原型属性")])]),s._v(" "),e("p",[s._v("结合借用构造函数传递参数和寄生模式实现继承。从图中可以看出，原型链继承的缺点已经被避免了。")]),s._v(" "),e("p",[e("strong",[s._v("这是最成熟的方法，也是现在库实现的方法")])]),s._v(" "),e("h2",{attrs:{id:"_7、混入方式继承多个对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、混入方式继承多个对象"}},[s._v("#")]),s._v(" 7、混入方式继承多个对象")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("SuperClass1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperClass1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" SuperClass2              "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" MyClass "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" SuperClass2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("properties "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("步骤：")]),s._v(" "),e("ul",[e("li",[s._v("父类初始化实例属性和原型属性")]),s._v(" "),e("li",[s._v("子类初始化，并借用构造函数传递增强子类实例属性（支持传参和避免篡改）")]),s._v(" "),e("li",[s._v("将子类原型指向一个父类原型，在子类原型通过Object.assign复制其他父类的属性，修复因重写原型而被修改的默认的constructor 属性")]),s._v(" "),e("li",[s._v("新增子类原型属性")])]),s._v(" "),e("h2",{attrs:{id:"_8、es6类继承extends"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、es6类继承extends"}},[s._v("#")]),s._v(" 8、ES6类继承extends")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("superType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/              /")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" prototype "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" properties\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("subType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),e("p",[s._v("注意这里 subType 的对象原型指向了 superType。"),e("code",[s._v("extends")]),s._v(" 继承的核心代码如下，其实现和上述的寄生组合式的原型继承方式一样，不过多做了一件事，把 subType 的对象原型指向了 superType。")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("_inherits")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("subType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" superType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建对象，创建父类原型的一个副本")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 增强对象，弥补因重写原型而失去的默认的constructor 属性")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定对象，将新创建的对象赋值给子类的原型")]),s._v("\n    subType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("superType "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        constructor"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            value"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" subType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            enumerable"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            writable"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            configurable"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// subType 的对象原型指向 superType")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setPrototypeOf \n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPrototypeOf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" subType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[s._v("在这里，为什么 subType "),e("code",[s._v("__proto__")]),s._v(" 要指向 superType？")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("原型分为对象原型 "),e("code",[s._v("__proto__")]),s._v(" 和函数原型 "),e("code",[s._v("prototype")]),s._v(" 。")])]),s._v(" "),e("li",[e("p",[s._v("函数也是一个对象，这里是为了继承 superType 上的方法。")]),s._v(" "),e("ul",[e("li",[s._v("设置subType.prototype，只有通过new生成的subType实例才会继承superType.prototype上的方法。")]),s._v(" "),e("li",[s._v("设置subType.__proto__ = superType，则直接调用subType.xxx 时也会继承superType上的方法（superType.xxx），比如Array.isArray()。这也被称为类方法。")])])])]),s._v(" "),e("p",[s._v("这上面的都可以说是语法糖。")]),s._v(" "),e("p",[s._v("下面来考察一下 ES6 继承和 ES5 的区别：")]),s._v(" "),e("p",[s._v("可以看一下这段 MDN 上的代码：")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Polygon")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("height"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" width")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Rectangle'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" height"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("width "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" width"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hi, I am a '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("area")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("width"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("area")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_area "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Square")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Polygon")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("length")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ReferenceError，super 需要先被调用！")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里，它调用父类的构造函数的, ")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作为Polygon 的 height, width")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意: 在派生的类中, 在你可以使用'this'之前, 必须先调用super()。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 忽略这一点的话, 将导致引用错误。")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Square'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[e("code",[s._v("super")]),s._v(" 调用了父类的构造函数。实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。并不是说在使用super()之前子类没有this，而是ES6规定在super()调用之前，不能在子类构造器中使用this。这是为了靠近 Java 的语法，即确保先执行父类构造器才能访问this。")]),s._v(" "),e("p",[s._v("由此可见，ES6的super(...args) 不等价于 Parent.apply(this, args)。所以 ES6 class 不是单纯语法糖。")]),s._v(" "),e("p",[s._v("总结一下，ES5 与 ES6 的区别：")]),s._v(" "),e("ul",[e("li",[s._v("ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）。")]),s._v(" "),e("li",[s._v("ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。")])]),s._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.im/post/5bcb2e295188255c55472db0",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript常用八种继承方案"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN super"),e("OutboundLink")],1)]),s._v(" "),e("li",[s._v("https://github.com/yygmind/blog/issues/7")]),s._v(" "),e("li",[s._v("ES6的子类有没有自己的this？ - 贺师俊的回答 - 知乎 https://www.zhihu.com/question/378032472/answer/1089697467")])])])}),[],!1,null,null,null);t.default=r.exports}}]);